{"version":3,"sources":["components/Header.js","components/FinalMeme.js","components/MemeHandler.js","App.js","serviceWorker.js","index.js"],"names":["Header","src","alt","FinalMeme","state","topText","bottomText","handleChange","bind","event","target","name","value","this","setState","style","textAlign","props","template","className","type","placeholder","onChange","url","React","Component","MemeHandler","allMemes","selectedMeme","handleClick","fetch","then","response","json","memes","data","imgList","map","item","width","height","padding","key","id","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0OAceA,MAZf,WACI,OACI,gCACI,yBACIC,IAAI,mFACJC,IAAI,aAER,+C,iDC8CGC,E,YApDX,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTC,QAAS,GACTC,WAAY,IAEhB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBANV,E,0EASDC,GAAQ,IAAD,EACMA,EAAMC,OAArBC,EADS,EACTA,KAAMC,EADG,EACHA,MACbC,KAAKC,SAAL,eAAiBH,EAAMC,M,+BAIvB,OACI,6BACI,wBAAIG,MAAO,CAACC,UAAW,WAAYH,KAAKI,MAAMC,SAASP,MACvD,0BAAMQ,UAAU,aACZ,2BACIC,KAAK,OACLT,KAAK,UACLU,YAAY,WACZT,MAAOC,KAAKT,MAAMC,QAClBiB,SAAUT,KAAKN,eAEnB,2BACIa,KAAK,OACLT,KAAK,aACLU,YAAY,cACZT,MAAOC,KAAKT,MAAME,WAClBgB,SAAUT,KAAKN,gBAGvB,yBAAKY,UAAU,QACX,yBACIlB,IAAKY,KAAKI,MAAMC,SAASK,IACzBrB,IAAKW,KAAKI,MAAMC,SAASP,OAG7B,wBAAIQ,UAAU,OAAON,KAAKT,MAAMC,SAChC,wBAAIc,UAAU,UAAUN,KAAKT,MAAME,aAGvC,gCACI,wBAAIS,MAAO,CAACC,UAAW,WAAvB,8C,GA9CIQ,IAAMC,WC4CfC,E,YA1CX,aAAe,IAAD,8BACV,+CACKtB,MAAQ,CACTuB,SAAU,GACVC,aAAc,MAElB,EAAKC,YAAc,EAAKA,YAAYrB,KAAjB,gBANT,E,iFASO,IAAD,OAChBsB,MAAM,qCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAa,IACRE,EAASF,EAASG,KAAlBD,MACP,EAAKpB,SAAU,CAACa,SAAUO,S,kCAI1BhB,GACRL,KAAKC,SAAS,CAACc,aAAcV,M,+BAGvB,IAAD,OACCkB,EAAUvB,KAAKT,MAAMuB,SAASU,KAAI,SAAAC,GAAI,OAAI,yBAC5CvB,MAAO,CAAEwB,MAAM,IAAKC,OAAO,IAAKC,QAAQ,YACxCC,IAAKJ,EAAKK,GACV1C,IAAKqC,EAAKf,IACVrB,IAAKoC,EAAK3B,KACViC,QAAS,WACL,EAAKf,YAAYS,SAIzB,OACI,6BACKzB,KAAKT,MAAMwB,cAAgB,kBAAC,EAAD,CAAWV,SAAUL,KAAKT,MAAMwB,gBAC1Df,KAAKT,MAAMwB,cAAgBQ,O,GArCnBZ,IAAMC,W,MCWjBoB,MATf,WACC,OACC,yBAAK1B,UAAU,OACd,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGiB2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c5e60c69.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction Header() {\r\n    return (\r\n        <header>\r\n            <img \r\n                src=\"http://www.pngall.com/wp-content/uploads/2016/03/Doge-Head-Free-Download-PNG.png\" \r\n                alt=\"Problem?\"\r\n            />\r\n            <p>Meme Generator</p>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from \"react\"\r\n\r\nclass FinalMeme extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            topText: \"\",\r\n            bottomText: \"\"\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n    }\r\n\r\n    handleChange(event) {\r\n        const {name, value} = event.target\r\n        this.setState({ [name]:value }) \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 style={{textAlign: \"center\"}}>{this.props.template.name}</h1>\r\n                <form className=\"meme-form\">\r\n                    <input \r\n                        type=\"text\"\r\n                        name=\"topText\"\r\n                        placeholder=\"Top Text\"\r\n                        value={this.state.topText}\r\n                        onChange={this.handleChange}\r\n                    /> \r\n                    <input \r\n                        type=\"text\"\r\n                        name=\"bottomText\"\r\n                        placeholder=\"Bottom Text\"\r\n                        value={this.state.bottomText}\r\n                        onChange={this.handleChange}\r\n                    /> \r\n                </form>\r\n                <div className=\"meme\">\r\n                    <img \r\n                        src={this.props.template.url} \r\n                        alt={this.props.template.name}\r\n               \r\n                    />\r\n                    <h2 className=\"top\">{this.state.topText}</h2>\r\n                    <h2 className=\"bottom\">{this.state.bottomText}</h2>\r\n                </div>\r\n\r\n                <footer>\r\n                    <h4 style={{textAlign: \"center\"}}>Take a screenshot to save your meme!</h4>\r\n                </footer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FinalMeme","import React from \"react\"\r\nimport FinalMeme from \"../components/FinalMeme\"\r\n\r\nclass MemeHandler extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            allMemes: [],\r\n            selectedMeme: null\r\n        }\r\n        this.handleClick = this.handleClick.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                const {memes} = response.data\r\n                this.setState( {allMemes: memes} )\r\n            })\r\n    }\r\n\r\n    handleClick(template) {\r\n        this.setState({selectedMeme: template})\r\n    }\r\n\r\n    render() {\r\n        const imgList = this.state.allMemes.map(item => <img\r\n            style={{ width:400, height:500, padding:\"6px 10px\" }}\r\n            key={item.id} \r\n            src={item.url} \r\n            alt={item.name} \r\n            onClick={() => {\r\n                this.handleClick(item)\r\n            }}\r\n            />)\r\n\r\n        return (\r\n            <div>\r\n                {this.state.selectedMeme && <FinalMeme template={this.state.selectedMeme}/>}\r\n                {!this.state.selectedMeme && imgList}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MemeHandler","import React from 'react';\nimport Header from './components/Header'\nimport MemeHandler from './components/MemeHandler'\nimport './App.css';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Header />\n\t\t\t<MemeHandler />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}